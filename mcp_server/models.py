# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:35:37+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint, constr


class ActionName(
    RootModel[constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=120)]
):
    root: constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=120)


class AvailabilityZone(
    RootModel[constr(pattern=r'([a-z]+-){2,3}\d[a-z]', min_length=0, max_length=16)]
):
    root: constr(pattern=r'([a-z]+-){2,3}\d[a-z]', min_length=0, max_length=16)


class AvailabilityZoneList(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone] = Field(..., max_length=10, min_length=1)


class AwsAccountId(
    RootModel[constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)]
):
    root: constr(pattern=r'^[0-9]{12}$', min_length=12, max_length=12)


class CmkArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\d:\d+:key/.*',
            min_length=0,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[a-z]{1,3}){0,2}:kms:([a-z]+-){2,3}\d:\d+:key/.*',
        min_length=0,
        max_length=2048,
    )


class CopyTags(RootModel[bool]):
    root: bool


class CopyTagsNullable(RootModel[bool]):
    root: bool


class Count(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class CronExpression(
    RootModel[constr(pattern=r'cron\([^\n]{11,100}\)', min_length=17, max_length=106)]
):
    root: constr(pattern=r'cron\([^\n]{11,100}\)', min_length=17, max_length=106)


class DeleteLifecyclePolicyRequest(BaseModel):
    pass


class DeleteLifecyclePolicyResponse(BaseModel):
    pass


class DescriptionRegex(
    RootModel[constr(pattern=r'[\p{all}]*', min_length=0, max_length=1000)]
):
    root: constr(pattern=r'[\p{all}]*', min_length=0, max_length=1000)


class Encrypted(RootModel[bool]):
    root: bool


class EncryptionConfiguration(BaseModel):
    CmkArn_1: Optional[CmkArn] = Field(None, alias='CmkArn')
    Encrypted_1: Encrypted = Field(..., alias='Encrypted')


class EventSourceValues(Enum):
    MANAGED_CWE = 'MANAGED_CWE'


class EventTypeValues(Enum):
    shareSnapshot = 'shareSnapshot'


class ExcludeBootVolume(RootModel[bool]):
    root: bool


class ExecutionRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*',
            min_length=0,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*',
        min_length=0,
        max_length=2048,
    )


class GetLifecyclePoliciesRequest(BaseModel):
    pass


class GetLifecyclePolicyRequest(BaseModel):
    pass


class GettablePolicyStateValues(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    ERROR = 'ERROR'


class InternalServerException(RootModel[Any]):
    root: Any


class Interval(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class IntervalUnitValues(Enum):
    HOURS = 'HOURS'


class InvalidRequestException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class ListTagsForResourceRequest(BaseModel):
    pass


class LocationValues(Enum):
    CLOUD = 'CLOUD'
    OUTPOST_LOCAL = 'OUTPOST_LOCAL'


class NoReboot(RootModel[bool]):
    root: bool


class PolicyArn(
    RootModel[
        constr(
            pattern=r'^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$',
            min_length=0,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws(-[a-z]{1,3}){0,2}:dlm:[A-Za-z0-9_/.-]{0,63}:\d+:policy/[0-9A-Za-z_-]{1,128}$',
        min_length=0,
        max_length=2048,
    )


class PolicyDescription(
    RootModel[constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=500)


class PolicyId(
    RootModel[constr(pattern=r'policy-[A-Za-z0-9]+', min_length=0, max_length=64)]
):
    root: constr(pattern=r'policy-[A-Za-z0-9]+', min_length=0, max_length=64)


class PolicyIdList(RootModel[List[PolicyId]]):
    root: List[PolicyId]


class PolicyTypeValues(Enum):
    EBS_SNAPSHOT_MANAGEMENT = 'EBS_SNAPSHOT_MANAGEMENT'
    IMAGE_MANAGEMENT = 'IMAGE_MANAGEMENT'
    EVENT_BASED_POLICY = 'EVENT_BASED_POLICY'


class ResourceLocationValues(Enum):
    CLOUD = 'CLOUD'
    OUTPOST = 'OUTPOST'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceTypeValues(Enum):
    VOLUME = 'VOLUME'
    INSTANCE = 'INSTANCE'


class ResourceTypeValuesList(RootModel[List[ResourceTypeValues]]):
    root: List[ResourceTypeValues] = Field(..., max_length=1, min_length=1)


class RetentionIntervalUnitValues(Enum):
    DAYS = 'DAYS'
    WEEKS = 'WEEKS'
    MONTHS = 'MONTHS'
    YEARS = 'YEARS'


class ScheduleName(
    RootModel[constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=120)]
):
    root: constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=120)


class SettablePolicyStateValues(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class ShareTargetAccountList(RootModel[List[AwsAccountId]]):
    root: List[AwsAccountId] = Field(..., min_length=1)


class SnapshotOwnerList(RootModel[List[AwsAccountId]]):
    root: List[AwsAccountId] = Field(..., max_length=50, min_length=0)


class StandardTierRetainRuleCount(RootModel[conint(ge=0, le=1000)]):
    root: conint(ge=0, le=1000)


class StandardTierRetainRuleInterval(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StatusMessage(
    RootModel[constr(pattern=r'[\p{all}]*', min_length=0, max_length=500)]
):
    root: constr(pattern=r'[\p{all}]*', min_length=0, max_length=500)


class String(RootModel[constr(pattern=r'[\p{all}]*', min_length=0, max_length=500)]):
    root: constr(pattern=r'[\p{all}]*', min_length=0, max_length=500)


class Tag(BaseModel):
    Key: String
    Value: String


class TagFilter(RootModel[constr(pattern=r'[\p{all}]*', min_length=0, max_length=256)]):
    root: constr(pattern=r'[\p{all}]*', min_length=0, max_length=256)


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'[\p{all}]*', max_length=256)]):
    root: constr(pattern=r'[\p{all}]*', max_length=256)


class TagsToAddFilterList(RootModel[List[TagFilter]]):
    root: List[TagFilter] = Field(..., max_length=50, min_length=0)


class TagsToAddList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=45, min_length=0)


class Target(
    RootModel[constr(pattern=r'^[\w:\-\/\*]+$', min_length=0, max_length=2048)]
):
    root: constr(pattern=r'^[\w:\-\/\*]+$', min_length=0, max_length=2048)


class TargetRegion(
    RootModel[constr(pattern=r'([a-z]+-){2,3}\d', min_length=0, max_length=16)]
):
    root: constr(pattern=r'([a-z]+-){2,3}\d', min_length=0, max_length=16)


class TargetTagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=1)


class TargetTagsFilterList(RootModel[List[TagFilter]]):
    root: List[TagFilter] = Field(..., max_length=50, min_length=1)


class Time(
    RootModel[
        constr(
            pattern=r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', min_length=5, max_length=5
        )
    ]
):
    root: constr(
        pattern=r'^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$', min_length=5, max_length=5
    )


class TimesList(RootModel[List[Time]]):
    root: List[Time] = Field(..., max_length=1)


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateLifecyclePolicyResponse(BaseModel):
    pass


class VariableTagsList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=45, min_length=0)


class State(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'
    ERROR = 'ERROR'


class PolicyIds(RootModel[List[PolicyId]]):
    root: List[PolicyId]


class ResourceTypes(RootModel[List[ResourceTypeValues]]):
    root: List[ResourceTypeValues] = Field(..., max_length=1, min_length=1)


class TargetTags(RootModel[List[TagFilter]]):
    root: List[TagFilter] = Field(..., max_length=50, min_length=1)


class TagsToAdd(RootModel[List[TagFilter]]):
    root: List[TagFilter] = Field(..., max_length=50, min_length=0)


class State2(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(..., description='One or more tags.')


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=1)


class CreateLifecyclePolicyResponse(BaseModel):
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')


class CreateRule(BaseModel):
    CronExpression_1: Optional[CronExpression] = Field(None, alias='CronExpression')
    Interval_1: Optional[Interval] = Field(None, alias='Interval')
    IntervalUnit: Optional[IntervalUnitValues] = None
    Location: Optional[LocationValues] = None
    Times: Optional[TimesList] = None


class CrossRegionCopyDeprecateRule(BaseModel):
    Interval_1: Optional[Interval] = Field(None, alias='Interval')
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class CrossRegionCopyRetainRule(BaseModel):
    Interval_1: Optional[Interval] = Field(None, alias='Interval')
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class CrossRegionCopyRule(BaseModel):
    CmkArn_1: Optional[CmkArn] = Field(None, alias='CmkArn')
    CopyTags: Optional[CopyTagsNullable] = None
    DeprecateRule: Optional[CrossRegionCopyDeprecateRule] = None
    Encrypted_1: Encrypted = Field(..., alias='Encrypted')
    RetainRule: Optional[CrossRegionCopyRetainRule] = None
    Target_1: Optional[Target] = Field(None, alias='Target')
    TargetRegion_1: Optional[TargetRegion] = Field(None, alias='TargetRegion')


class CrossRegionCopyRules(RootModel[List[CrossRegionCopyRule]]):
    root: List[CrossRegionCopyRule] = Field(..., max_length=3, min_length=0)


class DeprecateRule(BaseModel):
    Count_1: Optional[Count] = Field(None, alias='Count')
    Interval_1: Optional[Interval] = Field(None, alias='Interval')
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class EventParameters(BaseModel):
    DescriptionRegex_1: DescriptionRegex = Field(..., alias='DescriptionRegex')
    EventType: EventTypeValues
    SnapshotOwner: SnapshotOwnerList


class EventSource(BaseModel):
    Parameters: Optional[EventParameters] = None
    Type: EventSourceValues


class ExcludeDataVolumeTagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50, min_length=0)


class FastRestoreRule(BaseModel):
    AvailabilityZones: AvailabilityZoneList
    Count_1: Optional[Count] = Field(None, alias='Count')
    Interval_1: Optional[Interval] = Field(None, alias='Interval')
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class Parameters(BaseModel):
    ExcludeBootVolume_1: Optional[ExcludeBootVolume] = Field(
        None, alias='ExcludeBootVolume'
    )
    ExcludeDataVolumeTags: Optional[ExcludeDataVolumeTagList] = None
    NoReboot_1: Optional[NoReboot] = Field(None, alias='NoReboot')


class ResourceLocationList(RootModel[List[ResourceLocationValues]]):
    root: List[ResourceLocationValues] = Field(..., max_length=1, min_length=1)


class RetainRule(BaseModel):
    Count: Optional[StandardTierRetainRuleCount] = None
    Interval: Optional[StandardTierRetainRuleInterval] = None
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class RetentionArchiveTier(BaseModel):
    Count_1: Optional[Count] = Field(None, alias='Count')
    Interval_1: Optional[Interval] = Field(None, alias='Interval')
    IntervalUnit: Optional[RetentionIntervalUnitValues] = None


class ShareRule(BaseModel):
    TargetAccounts: ShareTargetAccountList
    UnshareInterval: Optional[Interval] = None
    UnshareIntervalUnit: Optional[RetentionIntervalUnitValues] = None


class ShareRules(RootModel[List[ShareRule]]):
    root: List[ShareRule] = Field(..., max_length=1, min_length=0)


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class ArchiveRetainRule(BaseModel):
    RetentionArchiveTier_1: RetentionArchiveTier = Field(
        ..., alias='RetentionArchiveTier'
    )


class ArchiveRule(BaseModel):
    RetainRule: ArchiveRetainRule


class CrossRegionCopyAction(BaseModel):
    EncryptionConfiguration_1: EncryptionConfiguration = Field(
        ..., alias='EncryptionConfiguration'
    )
    RetainRule: Optional[CrossRegionCopyRetainRule] = None
    Target_1: Target = Field(..., alias='Target')


class CrossRegionCopyActionList(RootModel[List[CrossRegionCopyAction]]):
    root: List[CrossRegionCopyAction] = Field(..., max_length=3, min_length=0)


class LifecyclePolicySummary(BaseModel):
    Description: Optional[PolicyDescription] = None
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    PolicyType: Optional[PolicyTypeValues] = None
    State: Optional[GettablePolicyStateValues] = None
    Tags: Optional[TagMap] = None


class LifecyclePolicySummaryList(RootModel[List[LifecyclePolicySummary]]):
    root: List[LifecyclePolicySummary]


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class Schedule(BaseModel):
    ArchiveRule_1: Optional[ArchiveRule] = Field(None, alias='ArchiveRule')
    CopyTags_1: Optional[CopyTags] = Field(None, alias='CopyTags')
    CreateRule_1: Optional[CreateRule] = Field(None, alias='CreateRule')
    CrossRegionCopyRules_1: Optional[CrossRegionCopyRules] = Field(
        None, alias='CrossRegionCopyRules'
    )
    DeprecateRule_1: Optional[DeprecateRule] = Field(None, alias='DeprecateRule')
    FastRestoreRule_1: Optional[FastRestoreRule] = Field(None, alias='FastRestoreRule')
    Name: Optional[ScheduleName] = None
    RetainRule_1: Optional[RetainRule] = Field(None, alias='RetainRule')
    ShareRules_1: Optional[ShareRules] = Field(None, alias='ShareRules')
    TagsToAdd: Optional[TagsToAddList] = None
    VariableTags: Optional[VariableTagsList] = None


class ScheduleList(RootModel[List[Schedule]]):
    root: List[Schedule] = Field(..., max_length=4, min_length=1)


class Action(BaseModel):
    CrossRegionCopy: CrossRegionCopyActionList
    Name: ActionName


class ActionList(RootModel[List[Action]]):
    root: List[Action] = Field(..., max_length=1, min_length=1)


class GetLifecyclePoliciesResponse(BaseModel):
    Policies: Optional[LifecyclePolicySummaryList] = None


class PolicyDetails(BaseModel):
    Actions: Optional[ActionList] = None
    EventSource_1: Optional[EventSource] = Field(None, alias='EventSource')
    Parameters_1: Optional[Parameters] = Field(None, alias='Parameters')
    PolicyType: Optional[PolicyTypeValues] = None
    ResourceLocations: Optional[ResourceLocationList] = None
    ResourceTypes: Optional[ResourceTypeValuesList] = None
    Schedules: Optional[ScheduleList] = None
    TargetTags: Optional[TargetTagList] = None


class UpdateLifecyclePolicyRequest(BaseModel):
    Description: Optional[PolicyDescription] = None
    ExecutionRoleArn_1: Optional[ExecutionRoleArn] = Field(
        None, alias='ExecutionRoleArn'
    )
    PolicyDetails_1: Optional[PolicyDetails] = Field(None, alias='PolicyDetails')
    State: Optional[SettablePolicyStateValues] = None


class PoliciesPostRequest(BaseModel):
    Description: constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=500) = (
        Field(
            ...,
            description='A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.',
        )
    )
    ExecutionRoleArn: constr(
        pattern=r'arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*',
        min_length=0,
        max_length=2048,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.',
    )
    PolicyDetails_1: PolicyDetails = Field(
        ...,
        alias='PolicyDetails',
        description=' <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.',
    )
    State: State2 = Field(
        ...,
        description='The desired activation state of the lifecycle policy after creation.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to apply to the lifecycle policy during creation.'
    )


class PoliciesPolicyIdPatchRequest(BaseModel):
    Description: Optional[
        constr(pattern=r'[0-9A-Za-z _-]+', min_length=0, max_length=500)
    ] = Field(None, description='A description of the lifecycle policy.')
    ExecutionRoleArn: Optional[
        constr(
            pattern=r'arn:aws(-[a-z]{1,3}){0,2}:iam::\d+:role/.*',
            min_length=0,
            max_length=2048,
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.',
    )
    PolicyDetails_1: Optional[PolicyDetails] = Field(
        None,
        alias='PolicyDetails',
        description=' <b>[All policy types]</b> Specifies the configuration of a lifecycle policy.',
    )
    State: Optional[State2] = Field(
        None,
        description='The desired activation state of the lifecycle policy after creation.',
    )


class CreateLifecyclePolicyRequest(BaseModel):
    Description: PolicyDescription
    ExecutionRoleArn_1: ExecutionRoleArn = Field(..., alias='ExecutionRoleArn')
    PolicyDetails_1: PolicyDetails = Field(..., alias='PolicyDetails')
    State: SettablePolicyStateValues
    Tags: Optional[TagMap] = None


class LifecyclePolicy(BaseModel):
    DateCreated: Optional[Timestamp] = None
    DateModified: Optional[Timestamp] = None
    Description: Optional[PolicyDescription] = None
    ExecutionRoleArn_1: Optional[ExecutionRoleArn] = Field(
        None, alias='ExecutionRoleArn'
    )
    PolicyArn_1: Optional[PolicyArn] = Field(None, alias='PolicyArn')
    PolicyDetails_1: Optional[PolicyDetails] = Field(None, alias='PolicyDetails')
    PolicyId_1: Optional[PolicyId] = Field(None, alias='PolicyId')
    State: Optional[GettablePolicyStateValues] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Tags: Optional[TagMap] = None


class GetLifecyclePolicyResponse(BaseModel):
    Policy: Optional[LifecyclePolicy] = None
